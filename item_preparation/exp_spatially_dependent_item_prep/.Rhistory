scale_alpha_identity() +
geom_point(aes(alpha = contrast), shape = 16) +
labs(x = "", y = "") +
theme_classic() +
theme(axis.text = element_blank()) +
theme(plot.margin = unit(c(0,0,0,0), "cm")) +
theme(legend.position = "None")
ggsave(p,filename=paste0(counter, letter,".png"),
device = "png",
bg = "white",
path = "all_plots1",
units = "px",
width = 1200,
height = 1200,
)
}
# This loop iterates the function above over the 45 r values in my_rs
# Running this chunk will use the function we defined above on each r value,
# then save the plot with the proper labeling
contrastlevels <- list()
contrastlevels[['A']] <- (1-(slopes$slope_0.25))
contrastlevels[['B']] <- (1-(slopes$slope_linear))
contrastlevels[['C']] <- (1-(slopes$slope_inverted))
contrastlevels[['D']] <- 1
abcd <- c('A','B','C','D')
for (i in abcd) {
print(i)
for (value in my_rs) {
plot_function(value, i, contrastlevels[[i]])
}
}
for (value in my_rs) {
plot_function(value, i, contrastlevels[[i]])
if (counter > 0)
counter = counter + 1
}
# This loop iterates the function above over the 45 r values in my_rs
# Running this chunk will use the function we defined above on each r value,
# then save the plot with the proper labeling
contrastlevels <- list()
contrastlevels[['A']] <- (1-(slopes$slope_0.25))
contrastlevels[['B']] <- (1-(slopes$slope_linear))
contrastlevels[['C']] <- (1-(slopes$slope_inverted))
contrastlevels[['D']] <- 1
abcd <- c('A','B','C','D')
for (i in abcd) {
counter = 1
print(i)
for (value in my_rs) {
plot_function(value, i, contrastlevels[[i]])
if (counter > 0)
counter = counter + 1
}
}
}
# This loop iterates the function above over the 45 r values in my_rs
# Running this chunk will use the function we defined above on each r value,
# then save the plot with the proper labeling
contrastlevels <- list()
contrastlevels[['A']] <- (1-(slopes$slope_0.25))
contrastlevels[['B']] <- (1-(slopes$slope_linear))
contrastlevels[['C']] <- (1-(slopes$slope_inverted))
contrastlevels[['D']] <- 1
abcd <- c('A','B','C','D')
for (i in abcd) {
print(i)
print(contrastlevels[[i]])
counter = 1
for (value in my_rs) {
plot_function(value,i,contrastlevels[[i]])
if (counter > 0) {
counter = counter + 1
}
}
}
# We only want one unique set of plots
number_of_participants = 1
# With 4 levels of IV1 we 180/4 = 45 trials
number_of_trials = 45
set.seed(1234)
my_ss <- rep(1:number_of_participants, each = number_of_trials)
my_rs <- seq(0.2, 0.99, length.out = 45)
correlations <- tibble(my_ss = rep(my_ss, each = 4),  my_rs = rep(my_rs, each = 4))
# A: Non-Linear Decay, a = 0.25
# B: Linear Decay
# C: Non-Linear Decay, Inverted
# D: Full Contrast
# This function generates plots with the various decay parameters.
# Maximum residual with this seed is 3.2, so for steep slope, we divide all residuals by 3.2
slope_function <- function(my_desired_r) {
set.seed(1234)
my_sample_size = 128
mean_variable_1 = 0
sd_variable_1 = 1
mean_variable_2 = 0
sd_variable_2 = 1
mu <- c(mean_variable_1, mean_variable_2)
myr <- my_desired_r * sqrt(sd_variable_1) * sqrt(sd_variable_2)
mysigma <- matrix(c(sd_variable_1, myr, myr, sd_variable_2), 2, 2)
corr_data = as_tibble(mvrnorm(my_sample_size, mu, mysigma, empirical = TRUE))
corr_model <- lm(V2 ~ V1, data = corr_data)
my_residuals <- abs(residuals(corr_model))
data_with_resid <- round(cbind(corr_data, my_residuals), 2)
slopes <- data_with_resid %>%
mutate(slope_linear = my_residuals/3.2) %>%
mutate(slope_0.25 = 1-(0.25)^my_residuals) %>%
mutate(slope_inverted = (1 + (0.25)^ my_residuals)-1)
return(slopes)
}
for(value in my_rs) {
slopes <- slope_function(value)
}
plot_function <- function(my_desired_r, letter, contrast) {
p <- ggplot(slopes, aes(x = V1, y = V2)) +
scale_alpha_identity() +
geom_point(aes(alpha = contrast), shape = 16) +
labs(x = "", y = "") +
theme_classic() +
theme(axis.text = element_blank()) +
theme(plot.margin = unit(c(0,0,0,0), "cm")) +
theme(legend.position = "None")
ggsave(p,filename=paste0(counter, letter,".png"),
device = "png",
bg = "white",
path = "all_plots1",
units = "px",
width = 1200,
height = 1200,
)
}
# This loop iterates the function above over the 45 r values in my_rs
# Running this chunk will use the function we defined above on each r value,
# then save the plot with the proper labeling
contrastlevels <- list()
contrastlevels[['A']] <- (1-(slopes$slope_0.25))
contrastlevels[['B']] <- (1-(slopes$slope_linear))
contrastlevels[['C']] <- (1-(slopes$slope_inverted))
contrastlevels[['D']] <- 1
abcd <- c('A','B','C','D')
for (i in abcd) {
print(i)
print(contrastlevels[[i]])
counter = 1
for (value in my_rs) {
plot_function(value,i,contrastlevels[[i]])
if (counter > 0) {
counter = counter + 1
}
}
}
slope_function(0.5)
slope_function(0.75)
# A: Non-Linear Decay, a = 0.25
# B: Linear Decay
# C: Non-Linear Decay, Inverted
# D: Full Contrast
# This function generates plots with the various decay parameters.
# Maximum residual with this seed is 3.2, so for steep slope, we divide all residuals by 3.2
slope_function <- function(my_desired_r) {
set.seed(1234)
my_sample_size = 128
mean_variable_1 = 0
sd_variable_1 = 1
mean_variable_2 = 0
sd_variable_2 = 1
mu <- c(mean_variable_1, mean_variable_2)
myr <- my_desired_r * sqrt(sd_variable_1) * sqrt(sd_variable_2)
mysigma <- matrix(c(sd_variable_1, myr, myr, sd_variable_2), 2, 2)
corr_data = as_tibble(mvrnorm(my_sample_size, mu, mysigma, empirical = TRUE))
corr_model <- lm(V2 ~ V1, data = corr_data)
my_residuals <- abs(residuals(corr_model))
data_with_resid <- round(cbind(corr_data, my_residuals), 2)
slopes <- data_with_resid %>%
mutate(slope_linear = my_residuals/3.2) %>%
mutate(slope_0.25 = 1-(0.25)^my_residuals) %>%
mutate(slope_inverted = (1 + (0.25)^ my_residuals)-1)
return(slopes)
}
# This loop iterates the function above over the 45 r values in my_rs
# Running this chunk will use the function we defined above on each r value,
# then save the plot with the proper labeling
contrastlevels <- list()
contrastlevels[['A']] <- (1-(slopes$slope_0.25))
contrastlevels[['B']] <- (1-(slopes$slope_linear))
contrastlevels[['C']] <- (1-(slopes$slope_inverted))
contrastlevels[['D']] <- 1
abcd <- c('A','B','C','D')
for (i in abcd) {
print(i)
print(contrastlevels[[i]])
counter = 1
for (value in my_rs) {
plot_function(value,i,contrastlevels[[i]])
if (counter > 0) {
counter = counter + 1
}
}
}
# This loop iterates the function above over the 45 r values in my_rs
# Running this chunk will use the function we defined above on each r value,
# then save the plot with the proper labeling
contrastlevels <- list()
contrastlevels[['A']] <- (1-(slopes$slope_0.25))
contrastlevels[['B']] <- (1-(slopes$slope_linear))
contrastlevels[['C']] <- (1-(slopes$slope_inverted))
contrastlevels[['D']] <- 1
abcd <- c('A','B','C','D')
for (i in abcd) {
print(i)
print(contrastlevels[[i]])
counter = 1
for (value in my_rs) {
slope_function(value)
plot_function(value,i,contrastlevels[[i]])
if (counter > 0) {
counter = counter + 1
}
}
}
# We only want one unique set of plots
number_of_participants = 1
# With 4 levels of IV1 we 180/4 = 45 trials
number_of_trials = 45
set.seed(1234)
my_ss <- rep(1:number_of_participants, each = number_of_trials)
my_rs <- seq(0.2, 0.99, length.out = 45)
correlations <- tibble(my_ss = rep(my_ss, each = 4),  my_rs = rep(my_rs, each = 4))
# A: Non-Linear Decay, a = 0.25
# B: Linear Decay
# C: Non-Linear Decay, Inverted
# D: Full Contrast
# This function generates plots with the various decay parameters.
# Maximum residual with this seed is 3.2, so for steep slope, we divide all residuals by 3.2
slope_function <- function(my_desired_r) {
set.seed(1234)
my_sample_size = 128
mean_variable_1 = 0
sd_variable_1 = 1
mean_variable_2 = 0
sd_variable_2 = 1
mu <- c(mean_variable_1, mean_variable_2)
myr <- my_desired_r * sqrt(sd_variable_1) * sqrt(sd_variable_2)
mysigma <- matrix(c(sd_variable_1, myr, myr, sd_variable_2), 2, 2)
corr_data = as_tibble(mvrnorm(my_sample_size, mu, mysigma, empirical = TRUE))
corr_model <- lm(V2 ~ V1, data = corr_data)
my_residuals <- abs(residuals(corr_model))
data_with_resid <- round(cbind(corr_data, my_residuals), 2)
slopes <- data_with_resid %>%
mutate(slope_linear = my_residuals/3.2) %>%
mutate(slope_0.25 = 1-(0.25)^my_residuals) %>%
mutate(slope_inverted = (1 + (0.25)^ my_residuals)-1)
return(slopes)
}
plot_function <- function(slopes, my_desired_r, letter, contrast) {
p <- ggplot(slopes, aes(x = V1, y = V2)) +
scale_alpha_identity() +
geom_point(aes(alpha = contrast), shape = 16) +
labs(x = "", y = "") +
theme_classic() +
theme(axis.text = element_blank()) +
theme(plot.margin = unit(c(0,0,0,0), "cm")) +
theme(legend.position = "None")
ggsave(p,filename=paste0(counter, letter,".png"),
device = "png",
bg = "white",
path = "all_plots1",
units = "px",
width = 1200,
height = 1200,
)
}
# This loop iterates the function above over the 45 r values in my_rs
# Running this chunk will use the function we defined above on each r value,
# then save the plot with the proper labeling
contrastlevels <- list()
contrastlevels[['A']] <- (1-(slopes$slope_0.25))
# This loop iterates the function above over the 45 r values in my_rs
# Running this chunk will use the function we defined above on each r value,
# then save the plot with the proper labeling
contrastlevels <- list()
abcd <- c('A','B','C','D')
for (i in abcd) {
print(i)
print(contrastlevels[[i]])
counter = 1
for (value in my_rs) {
slopes <- slope_function(value)
contrastlevels[['A']] <- (1-(slopes$slope_0.25))
contrastlevels[['B']] <- (1-(slopes$slope_linear))
contrastlevels[['C']] <- (1-(slopes$slope_inverted))
contrastlevels[['D']] <- 1
plot_function(slopes, value,i,contrastlevels[[i]])
if (counter > 0) {
counter = counter + 1
}
}
}
dir.create("example_plots")
my_desired_r <- c(0.2, 0.5, 0.8, 0.95)
example_plots <- function(my_desired_r){
set.seed(1234)
my_desired_r = 0.8
my_sample_size = 128
mean_variable_1 = 0
sd_variable_1 = 1
mean_variable_2 = 0
sd_variable_2 = 1
mu <- c(mean_variable_1, mean_variable_2)
myr <- my_desired_r * sqrt(sd_variable_1) * sqrt(sd_variable_2)
mysigma <- matrix(c(sd_variable_1, myr, myr, sd_variable_2), 2, 2)
corr_data = as_tibble(mvrnorm(my_sample_size, mu, mysigma, empirical = TRUE))
corr_model <- lm(V2 ~ V1, data = corr_data)
my_residuals <- abs(residuals(corr_model))
data_with_resid <- round(cbind(corr_data, my_residuals), 2)
test_plot <- ggplot(data_with_resid, aes(x = V1, y = V2)) +
geom_point()  +
labs(x = "", y = "") +
theme_classic() +
theme(axis.text = element_blank()) +
theme(plot.margin = unit(c(0,0,0,0), "cm")) +
theme(legend.position = "None")
ggsave(test_plot,filename=paste0("example",my_desired_r,".png"),
device = "png",
bg = "white",
path = "example_plots",
units = "px",
width = 1200,
height = 1200,)
}
for (value in my_desired_r) {
example_plots(value)
}
example_plots(value)
for (value in my_desired_r) {
example_plots(value)
}
setwd("C:/Users/mbch4gs2/R_work/Contrast_and_Scatterplots_paper_draft/item_preparation/exp_spatially_dependent_item_prep")
example_plots(0.5)
counter = 1
counter = counter + 1
for (value in my_desired_r) {
counter = 1
example_plots(value)
if (counter > 0){
counter = counter + 1
}
}
lappply(my_desired_r, example_plots())
lapply(my_desired_r, example_plots())
lapply(my_desired_r, example_plots)
lapply(my_desired_r, example_plots)
lapply(my_desired_r, example_plots)
my_residuals <- abs(residuals(corr_model))
example_plots <- function(my_desired_r){
set.seed(1234)
my_desired_r = 0.8
my_sample_size = 128
mean_variable_1 = 0
sd_variable_1 = 1
mean_variable_2 = 0
sd_variable_2 = 1
mu <- c(mean_variable_1, mean_variable_2)
myr <- my_desired_r * sqrt(sd_variable_1) * sqrt(sd_variable_2)
mysigma <- matrix(c(sd_variable_1, myr, myr, sd_variable_2), 2, 2)
corr_data = as_tibble(mvrnorm(my_sample_size, mu, mysigma, empirical = TRUE))
corr_model <- lm(V2 ~ V1, data = corr_data)
my_residuals <- abs(residuals(corr_model))
data_with_resid <- round(cbind(corr_data, my_residuals), 2)
test_plot <- ggplot(data_with_resid, aes(x = V1, y = V2)) +
geom_point()  +
labs(x = "", y = "") +
theme_classic() +
theme(axis.text = element_blank()) +
theme(plot.margin = unit(c(0,0,0,0), "cm")) +
theme(legend.position = "None")
ggsave(test_plot,filename=paste0("example",my_desired_r,".png"),
device = "png",
bg = "white",
path = "example_plots",
units = "px",
width = 1200,
height = 1200,)
}
lapply(my_desired_r, example_plots)
my_desired_r <- c(0.2,0.4)
lapply(my_desired_r, example_plots)
lapply(my_desired_r, example_plots)
my_desired_r <- c(0.2,0.4)
example_plots <- function(my_desired_r){
set.seed(1234)
my_sample_size = 128
mean_variable_1 = 0
sd_variable_1 = 1
mean_variable_2 = 0
sd_variable_2 = 1
mu <- c(mean_variable_1, mean_variable_2)
myr <- my_desired_r * sqrt(sd_variable_1) * sqrt(sd_variable_2)
mysigma <- matrix(c(sd_variable_1, myr, myr, sd_variable_2), 2, 2)
corr_data = as_tibble(mvrnorm(my_sample_size, mu, mysigma, empirical = TRUE))
corr_model <- lm(V2 ~ V1, data = corr_data)
my_residuals <- abs(residuals(corr_model))
data_with_resid <- round(cbind(corr_data, my_residuals), 2)
test_plot <- ggplot(data_with_resid, aes(x = V1, y = V2)) +
geom_point()  +
labs(x = "", y = "") +
theme_classic() +
theme(axis.text = element_blank()) +
theme(plot.margin = unit(c(0,0,0,0), "cm")) +
theme(legend.position = "None")
ggsave(test_plot,filename=paste0("example",my_desired_r,".png"),
device = "png",
bg = "white",
path = "example_plots",
units = "px",
width = 1200,
height = 1200,)
}
lapply(my_desired_r, example_plots)
lapply(my_desired_r, example_plots)
example_plots <- function(my_desired_r){
set.seed(1234)
my_sample_size = 128
mean_variable_1 = 0
sd_variable_1 = 1
mean_variable_2 = 0
sd_variable_2 = 1
mu <- c(mean_variable_1, mean_variable_2)
myr <- my_desired_r * sqrt(sd_variable_1) * sqrt(sd_variable_2)
mysigma <- matrix(c(sd_variable_1, myr, myr, sd_variable_2), 2, 2)
corr_data = as_tibble(mvrnorm(my_sample_size, mu, mysigma, empirical = TRUE))
corr_model <- lm(V2 ~ V1, data = corr_data)
my_residuals <- abs(residuals(corr_model))
data_with_resid <- round(cbind(corr_data, my_residuals), 2)
test_plot <- ggplot(data_with_resid, aes(x = V1, y = V2)) +
geom_point()  +
labs(x = "", y = "") +
theme_classic() +
theme(axis.text = element_blank()) +
theme(plot.margin = unit(c(0,0,0,0), "cm")) +
theme(legend.position = "None")
ggsave(test_plot,filename=paste0("example",gsub('[[:punct:] ]+', '',my_desired_r),".png"),
device = "png",
bg = "white",
path = "example_plots",
units = "px",
width = 1200,
height = 1200,)
}
lapply(my_desired_r, example_plots)
my_desired_r <- c(0.2,0.4, 0.8, 0.95)
example_plots <- function(my_desired_r){
set.seed(1234)
my_sample_size = 128
mean_variable_1 = 0
sd_variable_1 = 1
mean_variable_2 = 0
sd_variable_2 = 1
mu <- c(mean_variable_1, mean_variable_2)
myr <- my_desired_r * sqrt(sd_variable_1) * sqrt(sd_variable_2)
mysigma <- matrix(c(sd_variable_1, myr, myr, sd_variable_2), 2, 2)
corr_data = as_tibble(mvrnorm(my_sample_size, mu, mysigma, empirical = TRUE))
corr_model <- lm(V2 ~ V1, data = corr_data)
my_residuals <- abs(residuals(corr_model))
data_with_resid <- round(cbind(corr_data, my_residuals), 2)
test_plot <- ggplot(data_with_resid, aes(x = V1, y = V2)) +
geom_point()  +
labs(x = "", y = "") +
theme_classic() +
theme(axis.text = element_blank()) +
theme(plot.margin = unit(c(0,0,0,0), "cm")) +
theme(legend.position = "None")
ggsave(test_plot,filename=paste0("example",gsub('[[:punct:] ]+', '',my_desired_r),".png"),
device = "png",
bg = "white",
path = "example_plots",
units = "px",
width = 1200,
height = 1200,)
}
lapply(my_desired_r, example_plots)
dir.create("example_plots")
my_desired_r <- c(0.2,0.4, 0.8, 0.95)
example_plots <- function(my_desired_r){
set.seed(1234)
my_sample_size = 128
mean_variable_1 = 0
sd_variable_1 = 1
mean_variable_2 = 0
sd_variable_2 = 1
mu <- c(mean_variable_1, mean_variable_2)
myr <- my_desired_r * sqrt(sd_variable_1) * sqrt(sd_variable_2)
mysigma <- matrix(c(sd_variable_1, myr, myr, sd_variable_2), 2, 2)
corr_data = as_tibble(mvrnorm(my_sample_size, mu, mysigma, empirical = TRUE))
corr_model <- lm(V2 ~ V1, data = corr_data)
my_residuals <- abs(residuals(corr_model))
data_with_resid <- round(cbind(corr_data, my_residuals), 2)
test_plot <- ggplot(data_with_resid, aes(x = V1, y = V2)) +
geom_point()  +
labs(x = "", y = "") +
theme_classic() +
theme(axis.text = element_blank()) +
theme(plot.margin = unit(c(0,0,0,0), "cm")) +
theme(legend.position = "None")
ggsave(test_plot,filename=paste0("example","_", gsub('[[:punct:] ]+', '',my_desired_r),".png"),
device = "png",
bg = "white",
path = "example_plots",
units = "px",
width = 1200,
height = 1200,)
}
lapply(my_desired_r, example_plots)
