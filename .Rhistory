library(MASS)
set.seed(1234)
my_desired_r = 0.2
my_sample_size = 128
mean_variable_1 = 0
sd_variable_1 = 1
mean_variable_2 = 0
sd_variable_2 = 1
mu <- c(mean_variable_1, mean_variable_2)
myr <- my_desired_r * sqrt(sd_variable_1) * sqrt(sd_variable_2)
mysigma <- matrix(c(sd_variable_1, myr, myr, sd_variable_2), 2, 2)
corr_data = as_tibble(mvrnorm(my_sample_size, mu, mysigma, empirical = TRUE))
corr_model <- lm(V2 ~ V1, data = corr_data)
my_residuals <- abs(residuals(corr_model))
data_with_resid <- round(cbind(corr_data, my_residuals), 2)
slopes <- data_with_resid %>%
mutate(decay_linear = ((-my_residuals/2.6) + 1)) %>%
mutate(decay_inverted = 1-(0.25)^my_residuals) %>%
mutate(decay_non_linear = (1 + (0.25)^ my_residuals)-1) %>%
pivot_longer(cols = starts_with("de"),
names_to = c("decay"),
values_to = "transformed_residual")
slopes %>%
mutate(decay = str_replace_all(decay, pattern = "_", replacement = " ")) %>%
mutate(decay = str_to_title(decay)) %>%
ggplot(aes(x = my_residuals, y = transformed_residual)) +
geom_line(aes(colour = decay)) +
scale_x_continuous(breaks = scales::pretty_breaks(n = 20), limits = c(0,2.6)) +
labs(x = "Residual",
y = "Contrast Alpha",
title = "Relationship between residual and contrast alpha value") +
theme_minimal() +
theme(legend.title = element_blank(),
legend.position = "none") +
annotate(geom = "text", x  = 1.3, y = 0.12, label = "Non-Linear Decay", angle = -20) +
annotate(geom = "text", x  = 1.3, y = 0.44, label = "Linear Decay", angle = -30) +
annotate(geom = "text", x  = 2, y = 0.88, label = "Non-Linear Inverted Decay", angle = 8)
coord_cartesian(xlim = c(0,2.6), ylim = c(0,1))
library(MASS)
set.seed(1234)
my_desired_r = 0.2
my_sample_size = 128
mean_variable_1 = 0
sd_variable_1 = 1
mean_variable_2 = 0
sd_variable_2 = 1
mu <- c(mean_variable_1, mean_variable_2)
myr <- my_desired_r * sqrt(sd_variable_1) * sqrt(sd_variable_2)
mysigma <- matrix(c(sd_variable_1, myr, myr, sd_variable_2), 2, 2)
corr_data = as_tibble(mvrnorm(my_sample_size, mu, mysigma, empirical = TRUE))
corr_model <- lm(V2 ~ V1, data = corr_data)
my_residuals <- abs(residuals(corr_model))
data_with_resid <- round(cbind(corr_data, my_residuals), 2)
slopes <- data_with_resid %>%
mutate(decay_linear = ((-my_residuals/2.6) + 1)) %>%
mutate(decay_inverted = 1-(0.25)^my_residuals) %>%
mutate(decay_non_linear = (1 + (0.25)^ my_residuals)-1) %>%
pivot_longer(cols = starts_with("de"),
names_to = c("decay"),
values_to = "transformed_residual")
slopes %>%
mutate(decay = str_replace_all(decay, pattern = "_", replacement = " ")) %>%
mutate(decay = str_to_title(decay)) %>%
ggplot(aes(x = my_residuals, y = transformed_residual)) +
geom_line(aes(colour = decay)) +
scale_x_continuous(breaks = scales::pretty_breaks(n = 20), limits = c(0,2.6)) +
labs(x = "Residual",
y = "Contrast Alpha",
title = "Relationship between residual and contrast alpha value") +
theme_minimal() +
theme(legend.title = element_blank(),
legend.position = "none") +
annotate(geom = "text", x  = 1.3, y = 0.12, label = "Non-Linear Decay", angle = -20) +
annotate(geom = "text", x  = 1.3, y = 0.44, label = "Linear Decay", angle = -30) +
annotate(geom = "text", x  = 2, y = 0.88, label = "Non-Linear Inverted Decay", angle = 8)
coord_cartesian(xlim = c(0,2.6), ylim = c(0,1))
library(MASS)
set.seed(1234)
my_desired_r = 0.2
my_sample_size = 128
mean_variable_1 = 0
sd_variable_1 = 1
mean_variable_2 = 0
sd_variable_2 = 1
mu <- c(mean_variable_1, mean_variable_2)
myr <- my_desired_r * sqrt(sd_variable_1) * sqrt(sd_variable_2)
mysigma <- matrix(c(sd_variable_1, myr, myr, sd_variable_2), 2, 2)
corr_data = as_tibble(mvrnorm(my_sample_size, mu, mysigma, empirical = TRUE))
corr_model <- lm(V2 ~ V1, data = corr_data)
my_residuals <- abs(residuals(corr_model))
data_with_resid <- round(cbind(corr_data, my_residuals), 2)
slopes <- data_with_resid %>%
mutate(decay_linear = ((-my_residuals/2.6) + 1)) %>%
mutate(decay_inverted = 1-(0.25)^my_residuals) %>%
mutate(decay_non_linear = (1 + (0.25)^ my_residuals)-1) %>%
pivot_longer(cols = starts_with("de"),
names_to = c("decay"),
values_to = "transformed_residual")
slopes %>%
mutate(decay = str_replace_all(decay, pattern = "_", replacement = " ")) %>%
mutate(decay = str_to_title(decay)) %>%
ggplot(aes(x = my_residuals, y = transformed_residual)) +
geom_line(aes(colour = decay)) +
scale_x_continuous(breaks = scales::pretty_breaks(n = 20), limits = c(0,2.6)) +
labs(x = "Residual",
y = "Contrast Alpha",
title = "Relationship between residual and contrast alpha value") +
theme_minimal() +
theme(legend.title = element_blank(),
legend.position = "none") +
annotate(geom = "text", x  = 1.3, y = 0.12, label = "Non-Linear Decay", angle = -20) +
annotate(geom = "text", x  = 1.3, y = 0.44, label = "Linear Decay", angle = -30) +
annotate(geom = "text", x  = 2, y = 0.88, label = "Non-Linear Inverted Decay", angle = 8)
coord_cartesian(xlim = c(0,2.6), ylim = c(0,1))
knitr::opts_chunk$set(echo = TRUE)
# Knitting this document requires tinytex (install.packages("tinytex"))
# For formatting to be correct, additional tinytex packages are required
# Run tinytex:::install_yihui_pkgs() before knitting
set.seed(1234) # seed for all random number generation
# Loading packages
library(rticles)
library(tidyverse)
library(MASS)
library(emmeans)
library(scales)
library(buildmer)
library(lme4)
library(kableExtra)
library(afex)
library(papaja)
library(broom.mixed)
library(insight)
library(qwraps2)
library(lmerTest)
library(tinylabels)
# Comment out the following line if additional tinytex packages are already installed
#tinytex:::install_yihui_pkgs()
# in this script, models are cached. If eval_models <- FALSE, script will load
# cached models. Set eval_models <- TRUE to rebuild models from scratch
eval_models <- FALSE
if (eval_models == FALSE){
lazyload_cache_dir('contrast_and_scatterplots_cache/latex')
}
# load in data files
contrast1_anon <- read_csv("data/data_E1_uniform_adjustments.csv")
contrast2_anon <- read_csv("data/data_E2_spatially_dependent.csv")
# function for wrangling data
wrangle <- function(anon_file) {
literacy <- anon_file %>%
filter(!is.na(q1_slider.response)) %>%
rowwise() %>%
mutate(literacy = sum(c(q1_slider.response,
q2_slider.response,
q3_slider.response,
q4_slider.response,
q5_slider.response))) %>%
dplyr::select(participant,
literacy)
# extract demographic information
# link slider response numbers to gender categories
demographics <- anon_file %>%
filter(!is.na(gender_slider.response)) %>%
mutate(gender_slider.response = recode(gender_slider.response,
`1` = "F",
`2` = "M",
`3` = "NB")) %>%
dplyr::select(matches(c("participant",
"age_textbox.text",
"gender_slider.response")))
# split plots_with_labels column into item and contrast condition columns
anon_file <- anon_file %>%
mutate(images = str_replace(images, pattern = "A", replacement = "-A")) %>%
mutate(images = str_replace(images, pattern = "B", replacement = "-B")) %>%
mutate(images = str_replace(images, pattern = "C", replacement = "-C")) %>%
mutate(images = str_replace(images, pattern = "D", replacement = "-D")) %>%
separate(images, c("item", "contrast"), sep = "-") %>%
mutate(contrast = str_replace(contrast, pattern = ".png", replacement = "")) %>%
mutate(item = str_replace(item, pattern = "all_plots/", replacement = ""))
# select relevant columns
# select only experimental items
# add literacy data
# change data types where appropriate
# output this file with suffix 'tidy'
anon_file %>%
dplyr::select(c("participant",
"item",
"contrast",
"slider.response",
"my_rs",
"total_residuals",
"unique_item_no",
"session")) %>%
filter(unique_item_no < 181) %>%
inner_join(literacy, by = "participant") %>%
inner_join(demographics, by = "participant") %>%
mutate(across(matches(c("item", "contrast")), as_factor)) %>%
dplyr::select(-c("__participant")) %>%
mutate(difference = my_rs - slider.response) %>%
assign(paste0(unique(anon_file$expName), "_tidy"),
value = ., envir = .GlobalEnv)
}
# use wrangle function on anonmyised data files
walk(list(contrast1_anon,
contrast2_anon),
wrangle)
# Experiments were incorrectly named, so rename them
E1_uniform_adjustments_tidy <- E3_full_exp_tidy
E2_spatially_dependent_tidy <- E2_full_exp_tidy
# remove incorrectly named and anon dfs from environment
rm(E3_full_exp_tidy, E2_full_exp_tidy, contrast1_anon, contrast2_anon, wrangle)
# check for missing age values
sum(is.na(E1_uniform_adjustments_tidy$age_textbox.text))
sum(is.na(E2_spatially_dependent_tidy$age_textbox.text))
# print sessions with missing age values
E2_spatially_dependent_tidy %>%
filter(is.na(age_textbox.text)) %>%
distinct(session)
# no missing values in E1, some in E2.
# fill in missing age values from prolific_data.csv
# we can't include this as it contains personally
# identifiable Prolific IDs
#missing_age_a <- prolific_data %>%
#  filter(session == "_") %>%
#  pull(age_textbox.text)
#missing_age_b <- prolific_data %>%
#  filter(session == "_") %>%
#  pull(age_textbox.text)
#E2_spatially_dependent_tidy <- E2_spatially_dependent_tidy %>%
#  mutate(age_textbox.text = case_when(
#    session == "_" ~ missing_age_a,
#    session == "_" ~ missing_age_b,
#    TRUE ~ as.numeric(as.character(age_textbox.text))
#  ))
# this function takes a model and creates a nested model with the fixed effects
# term removed for anova comparison
comparison <- function(model) {
parens <- function(x) paste0("(",x,")")
onlyBars <- function(form) reformulate(sapply(findbars(form),
function(x)  parens(deparse(x))),
response=".")
onlyBars(formula(model))
cmpr_model <- update(model,onlyBars(formula(model)))
return(cmpr_model)
}
# this function takes two nested models, runs an anova, and the outputs the
# Chi-square statistic, the degrees of freedom, and the p value to the global environment
anova_results <- function(model, cmpr_model) {
model_name <- deparse(substitute(model))
if (class(model) == "buildmer") model <- model@model
if (class(cmpr_model) == "buildmer") cmpr_model <- cmpr_model@model
anova_output <- anova(model, cmpr_model)
assign(paste0(model_name, ".Chisq"),
anova_output$Chisq[2],
envir = .GlobalEnv)
assign(paste0(model_name, ".df"),
anova_output$Df[2],
envir = .GlobalEnv)
assign(paste0(model_name, ".p"),
anova_output$`Pr(>Chisq)`[2],
envir = .GlobalEnv)
}
# this function extracts test statistics and p values from model summaries
contrasts_extract <- function(model) {
model_name <- deparse(substitute(model))
if (class(model) == "buildmer") model <- model@model
EMMs <- emmeans(model, pairwise ~ contrast)
params <- as.data.frame(EMMs[2]) %>%
rename_with(str_replace,
pattern = "contrasts.", replacement = "",
matches("contrasts")) %>%
rename_with(str_to_title, !starts_with("p")) %>%
dplyr::select(c("Contrast", "Z.ratio", "p.value"))
return(params)
}
# generates summary statistics (mean and standard deviation)
sum_stats <- function(df) {
stats <- df %>%
filter(!is.na(difference)) %>%
group_by(contrast) %>%
summarise(mean = mean(difference),
sd = sd(difference)) %>%
rename_with(str_to_title) %>%
rename_with(str_to_upper, starts_with("S"))
return(stats)
}
# this function creates the bar plot to show mean errors
# they will need to be labelled more specifically later
bar_plot_function <- function(df) {
max_error <- max(df %>%
group_by(contrast) %>%
summarise(mean = mean(difference, na.rm = TRUE)) %>%
dplyr::select(-c("contrast")))
df %>%
filter(!is.na(difference)) %>%
filter(!is.na(contrast)) %>%
mutate(contrast = fct_relevel(contrast, "A", "B", "C", "D")) %>%
ggplot(aes(x = contrast, y = difference, fill = contrast)) +
scale_fill_brewer(type = "div", palette = "RdYlGn") +
geom_bar(stat = "summary", fun.y = "mean") +
stat_summary(fun.data = mean_se, geom= "errorbar", width = .3,
position = position_dodge(-.9)) +
theme_minimal() +
labs(x = "Contrast Condition",
y = "Mean Error") +
theme(axis.text.x = element_text(colour = "black", size = 14),
legend.position = "none",
axis.title = element_text(colour = "black", size = 13)) +
scale_y_continuous(breaks = scales::pretty_breaks(n = 8)) +
coord_cartesian(ylim = c(0, max_error))
}
my_rs <- seq(from = 0, to = 1, length.out = 100)
as.tibble(my_rs) %>%
mutate(under_est = (log(1-0.88*my_rs)/log(1-0.88))) %>%
ggplot() +
geom_smooth(aes(x = my_rs, y = under_est)) +
ylim(0,1) +
xlim(0,1) +
theme_minimal() +
labs(x = "Objective r value",
y = "Subjective r value")
x1 <- seq(0,1, length.out = 11)
y1 <- rep(1, times = 11)
df <- data.frame(x1, y1)
ggplot(aes(x1, y1), data = df) +
geom_point(alpha = x1, size = 18, shape = 16) +
theme(panel.background = element_blank(),
axis.ticks = element_blank(),
axis.text.y = element_blank(),
axis.title = element_blank(),
plot.title = element_text(size = 16),
axis.text.x = element_text(size = 14)) +
scale_x_continuous(breaks = scales::pretty_breaks(n = 11)) +
labs(title = "Effect of Alpha Values on Point Appearance")
rm(x1,y1,df)
knitr::include_graphics("images/example-plots.png")
knitr::include_graphics("images/example-trial.png")
# extract age data
age_e1 <- distinct(E1_uniform_adjustments_tidy, participant,
.keep_all = TRUE) %>%
summarise(mean = mean(age_textbox.text, na.rm = TRUE),
sd = sd(age_textbox.text, na.rm = TRUE))
# extract gender data
gender_e1 <- distinct(E1_uniform_adjustments_tidy, participant,
.keep_all = TRUE) %>%
group_by(gender_slider.response) %>%
summarise(perc = n()/nrow(.)*100) %>%
pivot_wider(names_from = gender_slider.response, values_from = perc)
# extract literacy data
literacy_e1 <- distinct(E1_uniform_adjustments_tidy, participant,
.keep_all = TRUE) %>%
summarise(mean = mean(literacy), sd = sd(literacy))
knitr::include_graphics("plot_examples/uniform_adjustments_plot_examples.png")
bar_plot_function(E1_uniform_adjustments_tidy) +
scale_x_discrete(labels = c("Low Contrast\nalpha = 0.25",
"Medium Contrast\nalpha = 0.5",
"High Contrast\nalpha = 0.75",
"Full Contrast\nalpha = 1"))
# E1 r estimation error modelling.
e1_model <- buildmer(difference ~ contrast +
(1 + contrast | participant) +
(1 + contrast | item),
data = E1_uniform_adjustments_tidy)
# E1 r estimation error model without fixed effect of contrast.
e1_model_comparison <- comparison(e1_model)
# Extract ANOVA results for E1 r estimation errors.
anova_results(e1_model, e1_model_comparison)
# outputs summary statistics for E1 model.
contrasts_e1 <- contrasts_extract(e1_model) %>%
mutate(p.value = scales::pvalue(p.value))
knitr::kable(contrasts_e1, booktabs = TRUE, digits = c(0,2,3), caption = "\\label{contrasts-table-e1}This table shows the contrasts between different levels of the contrast factor in E1. A = Low contrast (alpha = 0.25), Medium contrast (alpha = 0.5), C = High contrast (alpha = 0.75), D = Full contrast (alpha = 1).")
# outputs summary statistics for E1
sum_stats_e1 <- sum_stats(E1_uniform_adjustments_tidy)
knitr::kable(sum_stats_e1, booktabs = TRUE, digits = c(0,3,3), caption = "\\label{sum-stats-e1}This table shows means and standard errors for the contrast conditions in E1. A = Low contrast (alpha = 0.25), Medium contrast (alpha = 0.5), C = High contrast (alpha = 0.75), D = Full contrast (alpha = 1).")
# builds model with literacy as a fixed effect
e1_literacy <- lmer(add.terms(formula(e1_model), "literacy"),
data = E1_uniform_adjustments_tidy)
e1_model_lit_comparison <- e1_model
literacy_e1
e1_literacy
e1_literacy@model
model@e1_literacy
e1_literacy@e1_literacy
summary(e1_literacy)
formula(e1_literacy)
formula(e1_model)
knitr::opts_chunk$set(echo = TRUE)
# Knitting this document requires tinytex (install.packages("tinytex"))
# For formatting to be correct, additional tinytex packages are required
# Run tinytex:::install_yihui_pkgs() before knitting
# plots objective r value vs standard deviation of errors
E2_spatially_dependent_tidy %>%
dplyr::filter(contrast == "A") %>%
filter(!is.na(difference)) %>%
mutate(my_rs = as.character(round(my_rs, digits = 2))) %>%
group_by(my_rs) %>%
summarise(mean = mean(difference)) %>%
ggplot(aes(x = my_rs, y = mean)) +
geom_point() +
theme_minimal() +
theme(axis.text.x = element_text(angle = -60)) +
labs(x = "Objective Pearson's r",
y = "Mean Error")
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE)
ggplot(aes(x1, y1), data = df) +
geom_point(alpha = 1, size = x1, shape = 16) +
theme(panel.background = element_blank(),
axis.ticks = element_blank(),
axis.text.y = element_blank(),
axis.title = element_blank(),
plot.title = element_text(size = 16),
axis.text.x = element_text(size = 14)) +
scale_x_continuous(breaks = scales::pretty_breaks(n = 11)) +
labs(title = "Effect of Alpha Values on Point Appearance")
x1 <- seq(0,1, length.out = 8)
y1 <- rep(1, times = 8)
df <- data.frame(x1, y1)
ggplot(aes(x1, y1), data = df) +
geom_point(alpha = 1, size = x1, shape = 16) +
theme(panel.background = element_blank(),
axis.ticks = element_blank(),
axis.text.y = element_blank(),
axis.title = element_blank(),
plot.title = element_text(size = 16),
axis.text.x = element_text(size = 14)) +
scale_x_continuous(breaks = scales::pretty_breaks(n = 11)) +
labs(title = "Effect of Alpha Values on Point Appearance")
library(tidyverse)
library(MASS)
library(scales)
library(cowplot)
x1 <- seq(0,1, length.out = 8)
y1 <- rep(1, times = 8)
df <- data.frame(x1, y1)
ggplot(aes(x1, y1), data = df) +
geom_point(alpha = 1, size = x1, shape = 16) +
theme(panel.background = element_blank(),
axis.ticks = element_blank(),
axis.text.y = element_blank(),
axis.title = element_blank(),
plot.title = element_text(size = 16),
axis.text.x = element_text(size = 14)) +
scale_x_continuous(breaks = scales::pretty_breaks(n = 11)) +
labs(title = "Effect of Alpha Values on Point Appearance")
size_test <- ggplot(aes(x1, y1), data = df) +
geom_point(alpha = 1, size = x1, shape = 16) +
scale_size_identity() +
theme(panel.background = element_blank(),
axis.ticks = element_blank(),
axis.text.y = element_blank(),
axis.title = element_blank(),
plot.title = element_text(size = 16),
axis.text.x = element_text(size = 14)) +
scale_x_continuous(breaks = scales::pretty_breaks(n = 11)) +
labs(title = "Effect of Alpha Values on Point Appearance")
ggsave(size_test, device = "png", background = "white", units = "px", width = 1200, height = 1200, filename = "test.png")
size_test <- ggplot(aes(x1, y1), data = df) +
geom_point(aes(alpha = 1, size = x1), shape = 16) +
scale_size_identity() +
theme(panel.background = element_blank(),
axis.ticks = element_blank(),
axis.text.y = element_blank(),
axis.title = element_blank(),
plot.title = element_text(size = 16),
axis.text.x = element_text(size = 14)) +
scale_x_continuous(breaks = scales::pretty_breaks(n = 11)) +
labs(title = "Effect of Alpha Values on Point Appearance")
ggsave(size_test, device = "png", background = "white", units = "px", width = 1200, height = 1200, filename = "test.png")
x1 <- seq(0,8, length.out = 8)
y1 <- rep(1, times = 8)
df <- data.frame(x1, y1)
size_test <- ggplot(aes(x1, y1), data = df) +
geom_point(aes(alpha = 1, size = x1), shape = 16) +
scale_size_identity() +
theme(panel.background = element_blank(),
axis.ticks = element_blank(),
axis.text.y = element_blank(),
axis.title = element_blank(),
plot.title = element_text(size = 16),
axis.text.x = element_text(size = 14)) +
scale_x_continuous(breaks = scales::pretty_breaks(n = 11)) +
labs(title = "Effect of Alpha Values on Point Appearance")
ggsave(size_test, device = "png", background = "white", units = "px", width = 1200, height = 1200, filename = "test.png")
x1 <- seq(0,8, length.out = 8)
y1 <- rep(1, times = 8)
df <- data.frame(x1, y1)
size_test <- ggplot(aes(x1, y1), data = df) +
geom_point(aes(size = x1), shape = 16) +
scale_size_identity() +
theme(panel.background = element_blank(),
axis.ticks = element_blank(),
axis.text.y = element_blank(),
axis.title = element_blank(),
plot.title = element_text(size = 16),
axis.text.x = element_text(size = 14)) +
scale_x_continuous(breaks = scales::pretty_breaks(n = 11)) +
labs(title = "Effect of Alpha Values on Point Appearance")
ggsave(size_test, device = "png", background = "white", units = "px", width = 1200, height = 1200, filename = "test.png")
x1 <- seq(0,8, length.out = 8)
y1 <- rep(1, times = 8)
df <- data.frame(x1, y1)
size_test <- ggplot(aes(x1, y1), data = df) +
geom_point(aes(size = x1), shape = 16) +
scale_size_identity() +
theme(panel.background = element_blank(),
axis.ticks = element_blank(),
axis.text.y = element_blank(),
axis.title = element_blank(),
plot.title = element_text(size = 16),
axis.text.x = element_text(size = 14)) +
scale_x_continuous(breaks = scales::pretty_breaks(n = 11)) +
labs(title = "Effect of Alpha Values on Point Appearance")
ggsave(size_test, device = "png", background = "white", units = "px", width = 500, height = 500, filename = "test.png")
